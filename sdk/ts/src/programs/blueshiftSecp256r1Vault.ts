/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from "@solana/kit";
import {
  type ParsedDepositInstruction,
  type ParsedWithdrawInstruction,
} from "../instructions";

export const BLUESHIFT_SECP256R1_VAULT_PROGRAM_ADDRESS =
  "HNUZnoUCPVg8NarCwoXsLRZEyvaZnp34DvYz4aSJTdHt" as Address<"HNUZnoUCPVg8NarCwoXsLRZEyvaZnp34DvYz4aSJTdHt">;

export enum BlueshiftSecp256r1VaultInstruction {
  Deposit,
  Withdraw,
}

export function identifyBlueshiftSecp256r1VaultInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): BlueshiftSecp256r1VaultInstruction {
  const data = "data" in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return BlueshiftSecp256r1VaultInstruction.Deposit;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return BlueshiftSecp256r1VaultInstruction.Withdraw;
  }
  throw new Error(
    "The provided instruction could not be identified as a blueshiftSecp256r1Vault instruction."
  );
}

export type ParsedBlueshiftSecp256r1VaultInstruction<
  TProgram extends string = "HNUZnoUCPVg8NarCwoXsLRZEyvaZnp34DvYz4aSJTdHt",
> =
  | ({
      instructionType: BlueshiftSecp256r1VaultInstruction.Deposit;
    } & ParsedDepositInstruction<TProgram>)
  | ({
      instructionType: BlueshiftSecp256r1VaultInstruction.Withdraw;
    } & ParsedWithdrawInstruction<TProgram>);
