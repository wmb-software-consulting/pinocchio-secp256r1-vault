/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { BLUESHIFT_SECP256R1_VAULT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const WITHDRAW_DISCRIMINATOR = 1;

export function getWithdrawDiscriminatorBytes() {
  return getU8Encoder().encode(WITHDRAW_DISCRIMINATOR);
}

export type WithdrawInstruction<
  TProgram extends string = typeof BLUESHIFT_SECP256R1_VAULT_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountInstructions extends
    | string
    | IAccountMeta<string> = 'Sysvar1nstructions1111111111111111111111111',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountInstructions extends string
        ? ReadonlyAccount<TAccountInstructions>
        : TAccountInstructions,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawInstructionData = { discriminator: number; bump: number };

export type WithdrawInstructionDataArgs = { bump: number };

export function getWithdrawInstructionDataEncoder(): Encoder<WithdrawInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 1 })
  );
}

export function getWithdrawInstructionDataDecoder(): Decoder<WithdrawInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getWithdrawInstructionDataCodec(): Codec<
  WithdrawInstructionDataArgs,
  WithdrawInstructionData
> {
  return combineCodec(
    getWithdrawInstructionDataEncoder(),
    getWithdrawInstructionDataDecoder()
  );
}

export type WithdrawInput<
  TAccountPayer extends string = string,
  TAccountVault extends string = string,
  TAccountInstructions extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** payer of the transaction */
  payer: TransactionSigner<TAccountPayer>;
  /** Vault account to deposit into */
  vault: Address<TAccountVault>;
  /** Sysvar Instructions account used to get the instructions */
  instructions?: Address<TAccountInstructions>;
  /** System Program used to open our new class account */
  systemProgram?: Address<TAccountSystemProgram>;
  bump: WithdrawInstructionDataArgs['bump'];
};

export function getWithdrawInstruction<
  TAccountPayer extends string,
  TAccountVault extends string,
  TAccountInstructions extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof BLUESHIFT_SECP256R1_VAULT_PROGRAM_ADDRESS,
>(
  input: WithdrawInput<
    TAccountPayer,
    TAccountVault,
    TAccountInstructions,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountVault,
  TAccountInstructions,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? BLUESHIFT_SECP256R1_VAULT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    instructions: { value: input.instructions ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.instructions.value) {
    accounts.instructions.value =
      'Sysvar1nstructions1111111111111111111111111' as Address<'Sysvar1nstructions1111111111111111111111111'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.instructions),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getWithdrawInstructionDataEncoder().encode(
      args as WithdrawInstructionDataArgs
    ),
  } as WithdrawInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountVault,
    TAccountInstructions,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedWithdrawInstruction<
  TProgram extends string = typeof BLUESHIFT_SECP256R1_VAULT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** payer of the transaction */
    payer: TAccountMetas[0];
    /** Vault account to deposit into */
    vault: TAccountMetas[1];
    /** Sysvar Instructions account used to get the instructions */
    instructions: TAccountMetas[2];
    /** System Program used to open our new class account */
    systemProgram: TAccountMetas[3];
  };
  data: WithdrawInstructionData;
};

export function parseWithdrawInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedWithdrawInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      vault: getNextAccount(),
      instructions: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getWithdrawInstructionDataDecoder().decode(instruction.data),
  };
}
